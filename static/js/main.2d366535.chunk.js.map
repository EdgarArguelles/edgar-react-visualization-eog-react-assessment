{"version":3,"sources":["Features/Dashboard/reducer.ts","Features/Dashboard/saga.ts","Features/Weather/reducer.ts","Features/Weather/saga.ts","store/sagas.js","store/reducers.ts","store/index.ts","common/graphql.js","components/Chip.tsx","Features/Weather/Weather.tsx","components/Header.tsx","components/Wrapper.tsx","Features/Dashboard/components/SelectedMetric.tsx","Features/Dashboard/components/MetricCard.tsx","Features/Dashboard/components/Chart.tsx","Features/Dashboard/components/MetricCharts.tsx","Features/Dashboard/Dashboard.tsx","App.tsx","index.js"],"names":["slice","createSlice","name","initialState","metrics","realtimeMeasurements","historyMeasurements","reducers","changeSelection","state","action","forEach","metric","isSelected","payload","includes","map","find","measurement","value","at","unit","measurements","setMeasurementHistory","history","firstValue","setRealtimeMeasurements","length","push","metricsDataReceived","apiErrorReceived","reducer","actions","watchApiError","call","toast","error","takeEvery","DashboardActions","type","temperatureinCelsius","temperatureinFahrenheit","description","locationName","weatherDataRecevied","weatherApiErrorReceived","WeatherActions","root","spawn","dashboardSaga","weatherSaga","dashboard","dashboardReducer","weather","weatherReducer","combineReducers","client","createClient","url","createWSClient","subscriptionClient","SubscriptionClient","reconnect","exchanges","defaultExchanges","subscriptionExchange","forwardSubscription","operation","request","withStyles","theme","background","palette","secondary","main","label","color","primary","Chip","getWeather","Weather","getLocation","useGeolocation","latLong","latitude","longitude","dispatch","useDispatch","useSelector","useQuery","query","variables","result","fetching","data","useEffect","message","getWeatherForLocation","LinearProgress","useStyles","makeStyles","grow","flexGrow","classes","AppBar","position","Toolbar","Typography","variant","className","wrapper","height","Wrapper","children","select","margin","minWidth","chips","display","flexWrap","chip","SelectedMetric","getMetrics","FormControl","InputLabel","Select","multiple","filter","onChange","event","target","input","Input","renderValue","selected","key","MenuItem","Checkbox","checked","ListItemText","card","padding","MetricCard","useSubscription","newMeasurement","Grid","container","spacing","item","sm","md","lg","Card","elevation","CardContent","colors","ResponsiveContainer","LineChart","XAxis","dataKey","tick","x","y","Date","toLocaleString","hour","minute","tickCount","domain","Array","from","Set","YAxis","yAxisId","angle","dy","Tooltip","labelFormatter","Legend","index","Line","dot","stroke","chart","width","MetricCharts","useState","getTime","after","metricName","getMultipleMeasurements","Chart","grid","textAlign","showContent","xs","store","composeEnhancers","composeWithDevTools","sagaMiddleware","createSagaMiddleware","middlewares","applyMiddleware","createStore","run","sagas","createMuiTheme","default","App","CssBaseline","Header","Dashboard","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2d366535.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nexport type Metric = {\n  name: string;\n  isSelected: boolean;\n};\n\nexport type History = {\n  metric: string;\n  unit: string;\n  measurements: Measurement[];\n};\n\nexport type Measurement = {\n  metric: string;\n  value: number;\n  at: number;\n  unit: string;\n};\n\nexport type MetricsState = {\n  metrics: Metric[];\n  realtimeMeasurements: Measurement[];\n  historyMeasurements: History[];\n};\n\nconst initialState: MetricsState = {\n  metrics: [],\n  realtimeMeasurements: [],\n  historyMeasurements: [],\n};\n\nconst slice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    changeSelection: (state, action: PayloadAction<string[]>) => {\n      state.metrics.forEach(metric => (metric.isSelected = action.payload.includes(metric.name)));\n      state.realtimeMeasurements = action.payload.map(\n        metric =>\n          state.realtimeMeasurements.find(measurement => measurement.metric === metric) || {\n            metric,\n            value: 0,\n            at: 0,\n            unit: '',\n          },\n      );\n      state.historyMeasurements = action.payload.map(\n        metric =>\n          state.historyMeasurements.find(measurement => measurement.metric === metric) || {\n            metric,\n            unit: '',\n            measurements: [],\n          },\n      );\n    },\n    setMeasurementHistory: (state, action: PayloadAction<History[]>) => {\n      state.historyMeasurements = action.payload.map(history => {\n        const firstValue = history.measurements[0];\n        const unit = firstValue ? firstValue.unit : '';\n        return { ...history, unit };\n      });\n    },\n    setRealtimeMeasurements: (state, action: PayloadAction<Measurement>) => {\n      state.realtimeMeasurements = state.realtimeMeasurements.map(measurement =>\n        measurement.metric === action.payload.metric ? action.payload : measurement,\n      );\n\n      // add real time Measurement to history\n      const history = state.historyMeasurements.find(({ metric }) => metric === action.payload.metric);\n      if (history && history.measurements.length) history.measurements.push(action.payload);\n    },\n    metricsDataReceived: (state, action: PayloadAction<string[]>) => {\n      state.metrics = action.payload.map(name => ({ name, isSelected: false }));\n    },\n    apiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n  },\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { call, takeEvery } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { actions as DashboardActions, ApiErrorAction } from './reducer';\nimport { PayloadAction } from 'redux-starter-kit';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(DashboardActions.apiErrorReceived.type, apiErrorReceived);\n}\n","import { createSlice, PayloadAction } from 'redux-starter-kit';\n\nexport type WeatherForLocation = {\n  description: string;\n  locationName: string;\n  temperatureinCelsius: number;\n};\n\nexport type ApiErrorAction = {\n  error: string;\n};\n\nconst initialState = {\n  temperatureinCelsius: 0,\n  temperatureinFahrenheit: 0,\n  description: '',\n  locationName: '',\n};\n\nconst toF = (c: number) => (c * 9) / 5 + 32;\n\nconst slice = createSlice({\n  name: 'weather',\n  initialState,\n  reducers: {\n    weatherDataRecevied: (state, action: PayloadAction<WeatherForLocation>) => {\n      const { description, locationName, temperatureinCelsius } = action.payload;\n      state.temperatureinCelsius = temperatureinCelsius;\n      state.temperatureinFahrenheit = toF(temperatureinCelsius);\n      state.description = description;\n      state.locationName = locationName;\n    },\n    weatherApiErrorReceived: (state, action: PayloadAction<ApiErrorAction>) => state,\n  },\n});\n\nexport const reducer = slice.reducer;\nexport const actions = slice.actions;\n","import { takeEvery, call } from 'redux-saga/effects';\nimport { toast } from 'react-toastify';\nimport { actions as WeatherActions, ApiErrorAction } from './reducer';\nimport { PayloadAction } from 'redux-starter-kit';\n\nfunction* apiErrorReceived(action: PayloadAction<ApiErrorAction>) {\n  yield call(toast.error, `Error Received: ${action.payload.error}`);\n}\n\nexport default function* watchApiError() {\n  yield takeEvery(WeatherActions.weatherApiErrorReceived.type, apiErrorReceived);\n}\n","import { spawn } from 'redux-saga/effects';\nimport dashboardSaga from '../Features/Dashboard/saga';\nimport weatherSaga from '../Features/Weather/saga';\n\nexport default function* root() {\n  yield spawn(dashboardSaga);\n  yield spawn(weatherSaga);\n}\n","import { reducer as dashboardReducer } from '../Features/Dashboard/reducer';\nimport { reducer as weatherReducer } from '../Features/Weather/reducer';\n\nexport default {\n  dashboard: dashboardReducer,\n  weather: weatherReducer,\n};\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport createSagaMiddleware from 'redux-saga';\nimport { combineReducers } from 'redux-starter-kit';\nimport sagas from './sagas';\nimport reducers from './reducers';\n\nconst reducer = combineReducers(reducers);\nexport type IState = ReturnType<typeof reducer>;\n\nexport default () => {\n  const composeEnhancers = composeWithDevTools({});\n  const sagaMiddleware = createSagaMiddleware();\n  const middlewares = applyMiddleware(sagaMiddleware);\n  const store = createStore(reducer, composeEnhancers(middlewares));\n\n  sagaMiddleware.run(sagas);\n\n  return store;\n};\n","import { createClient, defaultExchanges, subscriptionExchange } from 'urql';\nimport { SubscriptionClient } from 'subscriptions-transport-ws';\n\nexport const client = createClient({\n  url: 'https://react.eogresources.com/graphql',\n});\n\nexport const createWSClient = () => {\n  const url = 'wss://react.eogresources.com/graphql';\n  const subscriptionClient = new SubscriptionClient(url, { reconnect: true });\n\n  return createClient({\n    url,\n    exchanges: [\n      ...defaultExchanges,\n      subscriptionExchange({\n        forwardSubscription(operation) {\n          return subscriptionClient.request(operation);\n        },\n      }),\n    ],\n  });\n};\n\nexport const getWeatherForLocationQuery = `\nquery($latLong: WeatherQuery!) {\n  getWeatherForLocation(latLong: $latLong) {\n    description\n    locationName\n    temperatureinCelsius\n  }\n}\n`;\n\nexport const getMetricsQuery = `\nquery {\n  getMetrics\n}\n`;\n\nexport const newMeasurementSubscription = `\nsubscription {\n    newMeasurement {\n      metric\n      value\n      at\n      unit\n    }\n  }\n`;\n\nexport const getMultipleMeasurementsQuery = `\nquery($input: [MeasurementQuery]) {\n  getMultipleMeasurements(input: $input)  {\n    metric\n    measurements {\n      metric\n      value\n      at\n      unit\n    }\n  }\n}\n`;\n","import Chip from '@material-ui/core/Chip';\nimport { withStyles, Theme } from '@material-ui/core/styles';\n\nconst cardStyles = (theme: Theme) => ({\n  root: {\n    background: theme.palette.secondary.main,\n  },\n  label: {\n    color: theme.palette.primary.main,\n  },\n});\nexport default withStyles(cardStyles)(Chip);\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { client, getWeatherForLocationQuery as query } from '../../common/graphql';\nimport { actions } from './reducer';\nimport { Provider, useQuery } from 'urql';\nimport { useGeolocation } from 'react-use';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Chip from '../../components/Chip';\nimport { IState } from '../../store';\n\nconst getWeather = (state: IState) => {\n  const { temperatureinFahrenheit, description, locationName } = state.weather;\n  return {\n    temperatureinFahrenheit,\n    description,\n    locationName,\n  };\n};\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <Weather />\n    </Provider>\n  );\n};\n\nconst Weather = () => {\n  const getLocation = useGeolocation();\n  // Default to houston\n  const latLong = {\n    latitude: getLocation.latitude || 29.7604,\n    longitude: getLocation.longitude || -95.3698,\n  };\n  const dispatch = useDispatch();\n  const { temperatureinFahrenheit, description, locationName } = useSelector(getWeather);\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      latLong,\n    },\n  });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.weatherApiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getWeatherForLocation } = data;\n    dispatch(actions.weatherDataRecevied(getWeatherForLocation));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return <Chip label={`Weather in ${locationName}: ${description} and ${temperatureinFahrenheit}°`} />;\n};\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Weather from '../Features/Weather/Weather';\n\nconst useStyles = makeStyles({\n  grow: {\n    flexGrow: 1,\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n\n  const name = \"edgar-react-visualization's\";\n  return (\n    <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n          {name} EOG React Visualization Assessment\n        </Typography>\n        <Weather />\n      </Toolbar>\n    </AppBar>\n  );\n};\n","import * as React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles({\n  wrapper: {\n    height: '100vh',\n  },\n});\n\nconst Wrapper: React.FC = ({ children }) => {\n  const classes = useStyles();\n  return <div className={classes.wrapper}>{children}</div>;\n};\n\nexport default Wrapper;\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { client, getMetricsQuery as query } from '../../../common/graphql';\nimport { actions } from '../reducer';\nimport { Provider, useQuery } from 'urql';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\nimport Chip from '@material-ui/core/Chip';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { IState } from '../../../store';\n\nconst useStyles = makeStyles({\n  select: {\n    margin: 20,\n    minWidth: '80%',\n  },\n  chips: {\n    display: 'flex',\n    flexWrap: 'wrap',\n  },\n  chip: {\n    margin: 2,\n  },\n});\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <SelectedMetric />\n    </Provider>\n  );\n};\n\nconst SelectedMetric = () => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const metrics = useSelector((state: IState) => state.dashboard.metrics);\n\n  const [result] = useQuery({ query });\n  const { fetching, data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.apiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getMetrics } = data;\n    dispatch(actions.metricsDataReceived(getMetrics));\n  }, [dispatch, data, error]);\n\n  if (fetching) return <LinearProgress />;\n\n  return (\n    <FormControl className={classes.select}>\n      <InputLabel>Metrics</InputLabel>\n      <Select\n        multiple\n        value={metrics.filter(metric => metric.isSelected).map(metric => metric.name)}\n        onChange={(event: any) => dispatch(actions.changeSelection(event.target.value))}\n        input={<Input />}\n        renderValue={(selected: any) => (\n          <div className={classes.chips}>\n            {selected.map((value: string) => (\n              <Chip key={value} label={value} className={classes.chip} />\n            ))}\n          </div>\n        )}\n      >\n        {metrics.map(({ name }) => (\n          <MenuItem key={name} value={name}>\n            <Checkbox checked={!!metrics.find(metric => metric.name === name && metric.isSelected)} />\n            <ListItemText primary={name} />\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Provider, useSubscription } from 'urql';\nimport { createWSClient, newMeasurementSubscription as query } from '../../../common/graphql';\nimport { actions } from '../reducer';\nimport { IState } from '../../../store';\n\nconst useStyles = makeStyles({\n  card: {\n    padding: 10,\n  },\n});\n\nexport default () => {\n  return (\n    <Provider value={createWSClient()}>\n      <MetricCard />\n    </Provider>\n  );\n};\n\nconst MetricCard = () => {\n  const dispatch = useDispatch();\n  const classes = useStyles();\n  const metrics = useSelector((state: IState) => state.dashboard.metrics);\n  const realtimeMeasurements = useSelector((state: IState) => state.dashboard.realtimeMeasurements);\n\n  const [result] = useSubscription({ query });\n  const { data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.apiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { newMeasurement } = data;\n    // only dispatch action when metric is selected\n    if (metrics.find(metric => metric.name === newMeasurement.metric && metric.isSelected))\n      dispatch(actions.setRealtimeMeasurements(newMeasurement));\n  }, [dispatch, data, error, metrics]);\n\n  return (\n    <Grid container spacing={2}>\n      {realtimeMeasurements.map(measurement => (\n        <Grid item sm={12} md={6} lg={4} key={measurement.metric}>\n          <Card elevation={3} className={classes.card}>\n            <CardContent>\n              <Typography variant=\"h6\">{measurement.metric}</Typography>\n              <Typography variant=\"h3\">{measurement.value}</Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      ))}\n    </Grid>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\nimport { Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis } from 'recharts';\nimport { IState } from '../../../store';\n\nexport default () => {\n  const allHistoryMeasurements = useSelector((state: IState) => state.dashboard.historyMeasurements);\n  const historyMeasurements = allHistoryMeasurements.filter(({ measurements }) => measurements.length);\n  const colors = ['purple', 'red', 'orange', 'brown', 'blue', 'green'];\n  const createYAxis = () => {\n    // get all units removing empty or duplicated\n    const units = Array.from(new Set(historyMeasurements.filter(({ unit }) => unit).map(({ unit }) => unit)));\n    return units.map(unit => (\n      <YAxis\n        key={unit}\n        yAxisId={unit}\n        tickCount={10}\n        label={{ value: unit, angle: -90, position: 'insideTopLeft', dy: 10 }}\n      />\n    ));\n  };\n\n  const renderCustomAxisTick = ({ x, y, payload }: { x: number; y: number; payload: any }) => (\n    <text x={x - 20} y={y + 15}>\n      {new Date(payload.value).toLocaleString('en-US', { hour: 'numeric', minute: 'numeric' })}\n    </text>\n  );\n\n  return (\n    <ResponsiveContainer>\n      <LineChart>\n        <XAxis dataKey=\"at\" tick={renderCustomAxisTick} tickCount={13} type=\"number\" domain={['left', 'right']} />\n        {createYAxis()}\n        <Tooltip labelFormatter={label => new Date(label).toLocaleString()} />\n        <Legend />\n        {historyMeasurements.map((history, index) => (\n          <Line\n            type=\"monotone\"\n            dataKey=\"value\"\n            dot={false}\n            stroke={colors[index]}\n            name={history.metric}\n            key={history.metric}\n            data={history.measurements}\n            yAxisId={history.unit}\n          />\n        ))}\n      </LineChart>\n    </ResponsiveContainer>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { client, getMultipleMeasurementsQuery as query } from '../../../common/graphql';\nimport { actions } from '../reducer';\nimport { Provider, useQuery } from 'urql';\nimport { IState } from '../../../store';\nimport Chart from './Chart';\n\nconst useStyles = makeStyles({\n  chart: {\n    width: '100%',\n    height: 500,\n  },\n});\n\nexport default () => {\n  return (\n    <Provider value={client}>\n      <MetricCharts />\n    </Provider>\n  );\n};\n\nconst MetricCharts = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const metrics = useSelector((state: IState) => state.dashboard.metrics);\n  const [after] = useState(new Date().getTime() - 30 * 60 * 1000); // current time - 30 mins\n  const input = metrics.filter(({ isSelected }) => isSelected).map(({ name }) => ({ metricName: name, after }));\n\n  const [result] = useQuery({\n    query,\n    variables: {\n      input,\n    },\n  });\n  const { data, error } = result;\n  useEffect(() => {\n    if (error) {\n      dispatch(actions.apiErrorReceived({ error: error.message }));\n      return;\n    }\n    if (!data) return;\n    const { getMultipleMeasurements } = data;\n    dispatch(actions.setMeasurementHistory(getMultipleMeasurements));\n  }, [dispatch, data, error]);\n\n  return (\n    <div className={classes.chart}>\n      <Chart />\n    </div>\n  );\n};\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { useSelector } from 'react-redux';\nimport Grid from '@material-ui/core/Grid';\nimport { IState } from '../../store';\nimport SelectedMetric from './components/SelectedMetric';\nimport MetricCard from './components/MetricCard';\nimport MetricCharts from './components/MetricCharts';\n\nconst useStyles = makeStyles({\n  grid: {\n    width: '100%',\n  },\n  select: {\n    textAlign: 'right',\n  },\n});\n\nexport default () => {\n  const classes = useStyles();\n  const metrics = useSelector((state: IState) => state.dashboard.metrics);\n  const showContent = !!metrics.filter(metric => metric.isSelected).length;\n\n  return (\n    <Grid container spacing={5} className={classes.grid}>\n      <Grid item xs={6}>\n        {showContent && <MetricCard />}\n      </Grid>\n      <Grid item xs={6} className={classes.select}>\n        <SelectedMetric />\n      </Grid>\n      <Grid item xs={12}>\n        {showContent && <MetricCharts />}\n      </Grid>\n    </Grid>\n  );\n};\n","import React from 'react';\nimport createStore from './store';\nimport { Provider } from 'react-redux';\nimport { ToastContainer } from 'react-toastify';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Header from './components/Header';\nimport Wrapper from './components/Wrapper';\nimport Dashboard from './Features/Dashboard/Dashboard';\n\nconst store = createStore();\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: 'rgb(39,49,66)',\n    },\n    secondary: {\n      main: 'rgb(197,208,222)',\n    },\n    background: {\n      default: 'rgb(226,231,238)',\n    },\n  },\n});\n\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <CssBaseline />\n    <Provider store={store}>\n      <Wrapper>\n        <Header />\n        <Dashboard />\n        <ToastContainer />\n      </Wrapper>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}